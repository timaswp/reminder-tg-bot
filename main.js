import 'dotenv/config';
import TelegramBot from 'node-telegram-bot-api';
import dedent from 'dedent';

import connectDB from './db.js';
import Task from './models/task.js';
import User from './models/user.js';
import { initAgenda, scheduleReminder } from './agenda.js';
import { encrypt, decrypt } from './util/encryption.js';
import getTimeZoneByCity from './util/getTimeZone.js';
import { convertLocalTimeToUTC, convertUtcToLocalTime } from './util/convertTime.js';

const token = process.env.TG_TOKEN;

const bot = new TelegramBot(token, { polling: true });

(async () => {
    await connectDB();
    await initAgenda(bot);

    bot.onText(/\/start/, (msg) => {
        const message = dedent(
            `<b>–ü—Ä–∏–≤–µ—Ç, ${msg.from.first_name}!</b>

            <i>–≠—Ç–æ —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞–¥–∞—á, —á—Ç–æ–±—ã —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–ª :)</i>

            –£–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π –≥–æ—Ä–æ–¥ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã, —á—Ç–æ–±—ã —è –º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å üïí
            –ù–∞–ø—Ä–∏–º–µ—Ä: <b>–ë–∞–∫—É</b>

            <i>P.S: —Ç—ã –º–æ–∂–µ—à—å –≤ –±—É–¥—É—â–µ–º –ø–æ–º–µ–Ω—è—Ç—å —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∫–æ–º–∞–Ω–¥—ã /start.</i>
            –ù–µ –≤–æ–ª–Ω—É–π—Å—è, —Ç–≤–æ–∏ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ü´°
            
            <i>–ë–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –≠—Ç–æ beta-–≤–µ—Ä—Å–∏—è</i>`
        );

        bot.sendMessage(msg.chat.id, message, { parse_mode: 'HTML' });

        bot.once('message', async (msg) => {
            if (msg.text.startsWith('/')) return;

            const userTimeZone =  await getTimeZoneByCity(bot, msg);

            const existingUser = await User.findOne({ userId: msg.chat.id });

            if (existingUser) {
                try {
                    await User.updateOne(
                        { userId: msg.chat.id },
                        { timeZone: userTimeZone }
                    );
                } catch (error) {
                    bot.sendMessage(msg.chat.id, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ :(\n${error.message}`);
                }
            } else {
                try {
                    await User.create({ userId: msg.chat.id, timeZone: userTimeZone });
                } catch (error) {
                    bot.sendMessage(msg.chat.id, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ :(\n${error.message}`);
                }
            }

            bot.sendMessage(msg.chat.id, dedent(
                `–¢–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å - ${userTimeZone}.\n
                –î–æ–±–∞–≤—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
                /add –ø–æ–∑–≤–æ–Ω–∏—Ç—å –¥—Ä—É–≥—É –≤ 16:30`
            ));
        });
    });

    bot.onText(/\/add\s?(.*)/, async (msg, match) => {
        const existingUser = await User.findOne({ userId: msg.chat.id });

        if (existingUser) {
            try {
                const chatId = msg.chat.id;
                const input = match[1];
                const [text, timeStr] = input.split(' –≤ ');
                if (!timeStr)
                    return bot.sendMessage(
                        chatId,
                        '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /add –∫—É–ø–∏—Ç—å —Ö–ª–µ–± –≤ 18:30'
                    );
    
                const now = new Date();
                const remindAt = convertLocalTimeToUTC(timeStr, existingUser.timeZone);
                if (remindAt < now) remindAt.setDate(remindAt.getDate() + 1);
    
                const task = await Task.create({ userId: chatId, text: encrypt(text), remindAt });
                await scheduleReminder(task);
    
                bot.sendMessage(
                    chatId,
                    `‚úÖ –ó–∞–¥–∞—á–∞ "${text}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ ${timeStr}`
                );
            } catch (err) {
                console.error(err);
                bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
            }
        }


        
    });

    bot.onText(/\/list/, async (msg) => {
        const tasks = await Task.find({ userId: msg.chat.id });
        if (!tasks.length)
            return bot.sendMessage(msg.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.');

        const buttons = {
            reset: '–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üóë‚ùå'
        }

        const user = await User.findOne({ userId: msg.chat.id });

        const list = tasks
            .map(
                (t) =>
                    `ID: ${t._id}\n‚Ä¢ ${decrypt(t.text)} ‚Äî ${convertUtcToLocalTime(t.remindAt, user.timeZone)}`
            )
            .join('\n\n');
        bot.sendMessage(msg.chat.id, `üìã –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n\n${list}`, {
            "reply_markup": {
                "keyboard": [[buttons.reset]]
            }
        });

        bot.once('text', async (msg) => {
            if(msg.text.toString().toLowerCase() === buttons.reset.toLowerCase()) {
                try {
                    await Task.deleteMany({ userId: msg.chat.id });
                    bot.sendMessage(msg.chat.id, '–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /add', {
                        reply_markup: {
                            remove_keyboard: true
                        }
                    });
                } catch (error) {
                    bot.sendMessage(msg.chat.id, `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n${error.message}`, {
                        reply_markup: {
                            remove_keyboard: true
                        }
                    });
                }
            } else if (msg.text.toString().toLowerCase() === '/list') {
                return;
            } else {
                bot.sendMessage(msg.chat.id, '–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help', {
                    reply_markup: {
                        remove_keyboard: true
                    }
                });
            }
        });
    });

    bot.onText(/\/delete (.+)/, async (msg, match) => {
        const id = match[1].trim();
        const res = await Task.deleteOne({ _id: id, userId: msg.chat.id });
        bot.sendMessage(
            msg.chat.id,
            res.deletedCount
                ? '‚ùå –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞'
                : '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É —Å —Ç–∞–∫–∏–º ID'
        );
    });

    bot.onText(/\/help/, (msg) => {
        const message = dedent(
            `<b>–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:<b>\n
            /start - –æ–±–Ω–æ–≤–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
            /add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
            /list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            /delete <ID –∑–∞–¥–∞—á–∏> - —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–ª–∞–Ω–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É`
        );
        bot.sendMessage(
            msg.chat.id,
            message
        );
    });
})();
