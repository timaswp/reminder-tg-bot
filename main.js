import 'dotenv/config';
import TelegramBot from 'node-telegram-bot-api';
import connectDB from './db.js';
import Task from './models/task.js';
import { initAgenda, scheduleReminder } from './agenda.js';

const token = process.env.TG_TOKEN;

const bot = new TelegramBot(token, { polling: true });

(async () => {
    await connectDB();
    await initAgenda(bot);

    bot.onText(/\/start/, (msg) => {
        bot.sendMessage(
            msg.chat.id,
            `–ü—Ä–∏–≤–µ—Ç!\n–î–æ–±–∞–≤—å –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n/add –∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –≤ 18:30\n\n–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å ‚Äî /list\n–£–¥–∞–ª–∏—Ç—å ‚Äî /delete <ID>`
        );
    });

    bot.onText(/\/add (.+)/, async (msg, match) => {
        try {
            const chatId = msg.chat.id;
            const input = match[1];
            const [text, timeStr] = input.split(' –≤ ');
            if (!timeStr)
                return bot.sendMessage(
                    chatId,
                    '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π: /add –∫—É–ø–∏—Ç—å —Ö–ª–µ–± –≤ 18:30'
                );

            const [h, m] = timeStr.split(':').map(Number);
            const now = new Date();
            const remindAt = new Date(
                now.getFullYear(),
                now.getMonth(),
                now.getDate(),
                h,
                m
            );
            if (remindAt < now) remindAt.setDate(remindAt.getDate() + 1);

            const task = await Task.create({ userId: chatId, text, remindAt });
            await scheduleReminder(task);

            bot.sendMessage(
                chatId,
                `‚úÖ –ó–∞–¥–∞—á–∞ "${text}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ ${remindAt.toLocaleString()}`
            );
        } catch (err) {
            console.error(err);
            bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.');
        }
    });

    bot.onText(/\/list/, async (msg) => {
        const tasks = await Task.find({ userId: msg.chat.id });
        if (!tasks.length)
            return bot.sendMessage(msg.chat.id, '–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–¥–∞—á.');

        const list = tasks
            .map(
                (t) =>
                    `ID: ${t._id}\n‚Ä¢ ${t.text} ‚Äî ${t.remindAt.toLocaleString()}`
            )
            .join('\n\n');
        bot.sendMessage(msg.chat.id, `üìã –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n\n${list}`);
    });

    bot.onText(/\/delete (.+)/, async (msg, match) => {
        const id = match[1].trim();
        const res = await Task.deleteOne({ _id: id, userId: msg.chat.id });
        bot.sendMessage(
            msg.chat.id,
            res.deletedCount
                ? '‚ùå –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞'
                : '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞—á—É —Å —Ç–∞–∫–∏–º ID'
        );
    });

    bot.onText(/\/help/, (msg) => {
        bot.sendMessage(
            msg.chat.id,
            `–í—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n/add -\n–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n\n/list -\n–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á\n\n/delete <ID> -\n—É–¥–∞–ª–∏—Ç—å –∑–∞–ø–ª–∞–Ω–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É`
        );
    });
})();
